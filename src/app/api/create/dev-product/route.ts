import { NextRequest, NextResponse } from "next/server"

// Function to generate a random name
function generateUUID(): string {
  let dateTime = new Date().getTime()
  const guid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (dateTime + Math.random() * 16) % 16 | 0
    dateTime = Math.floor(dateTime / 16)
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16)
  })
  return guid
}

async function checkCookie() {
  return fetch("https://www.roblox.com/mobileapi/userinfo", {
    method: "GET",
    headers: {
      Cookie: `.ROBLOSECURITY=${process.env.ROBLOX_COOKIE};`,
      "Content-Type": "application/json",
    },
    credentials: "include",
    redirect: "error",
  })
    .then((res) => res.json())
    .then((res) => {
      return res
    })
}

async function getGeneralToken() {
  return fetch("https://auth.roblox.com/v2/logout", {
    method: "POST",
    headers: {
      Cookie: `.ROBLOSECURITY=${process.env.ROBLOX_COOKIE};`,
      "Content-Type": "application/json",
    },
    credentials: "include",
    redirect: "error",
  })
    .then((res) => {
      return res.headers.get("x-csrf-token")
    })
    .catch((err) => {
      console.log("Unable to get XCSRF Token: " + err)
      return err
    })
}

async function createDevProduct(
  universeId: number | string,
  name: string,
  description: string,
  priceInRobux: number | string,
  token?: string
) {
  return fetch(
    `https://apis.roblox.com/developer-products/v1/universes/${universeId}/developerproducts?name=${name}&description=${description}&priceInRobux=${priceInRobux}`,
    {
      method: "POST",
      headers: {
        Cookie: `.ROBLOSECURITY=${process.env.ROBLOX_COOKIE};`,
        "Content-Type": "application/json",
        "X-CSRF-TOKEN": token ?? (await getGeneralToken()),
      },
      credentials: "include",
      redirect: "error",
    }
  )
    .then((res) => res.json())
    .then((res) => {
      return NextResponse.json({
        success: true,
        ...res,
      })
    })
    .catch(() => {
      return NextResponse.json(
        {
          success: false,
          error:
            "Could not create developer product. Reasons for this could be: Cookie is not inside the region; Cookie is invalid",
        },
        { status: 500 }
      )
    })
}

export async function GET(request: NextRequest) {
  const priceInRobux = request.nextUrl.searchParams.get("priceInRobux")
  const name = request.nextUrl.searchParams.get("name") ?? generateUUID()
  const universeId =
    request.nextUrl.searchParams.get("universeId") ?? 2889709413
  const description =
    request.nextUrl.searchParams.get("description") ??
    `Generated by API Endpoint at ${new Date().toISOString().slice(0, 10)}`

  try {
    if (!priceInRobux) {
      return NextResponse.json(
        {
          success: false,
          error: "No priceInRobux provided",
        },
        { status: 400 }
      )
    }
    const cookie = await checkCookie()
    if (cookie === "User not authorized") {
      return NextResponse.json(
        {
          success: false,
          error: "Invalid Cookie",
        },
        { status: 401 }
      )
    }
    return await createDevProduct(universeId, name, description, priceInRobux)
  } catch (error) {
    console.log("An error occurred: " + error)
    return NextResponse.json(
      {
        success: false,
        error: "An unknown error occurred",
      },
      { status: 500 }
    )
  }
}
